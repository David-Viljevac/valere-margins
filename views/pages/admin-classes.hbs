{{#if error}}
<div style="background-color: #e74c3c; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
    {{error}}
</div>
{{/if}}

{{#if success}}
<div style="background-color: #27ae60; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
    {{success}}
</div>
{{/if}}

<div class="page-header" style="margin-bottom: 30px;">
    <h1 style="color: #2c3e50; margin-bottom: 10px;">Manage Classes</h1>
    <p style="color: #7f8c8d;">Add, edit, and manage sports classes</p>
</div>

<!-- Add New Class Form -->
<div
    style="background: white; padding: 25px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 30px;">
    <h2 style="color: #2c3e50; margin-bottom: 20px;">Add New Class</h2>

    <form action="/classes/create" method="POST" style="display: grid; gap: 20px;">
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
            <!-- Sport Selection -->
            <div>
                <label for="sport_id"
                    style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">Sport:</label>
                <select id="sport_id" name="sport_id" required
                    style="width: 100%; padding: 12px; border: 2px solid #bdc3c7; border-radius: 5px; font-size: 16px;">
                    <option value="">Select a sport</option>
                    {{#each sports}}
                    <option value="{{id}}">{{name}}</option>
                    {{/each}}
                </select>
            </div>

            <!-- Class Description -->
            <div>
                <label for="description"
                    style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">Description:</label>
                <input type="text" id="description" name="description" placeholder="e.g., Morning Yoga Session" required
                    style="width: 100%; padding: 12px; border: 2px solid #bdc3c7; border-radius: 5px; font-size: 16px;">
            </div>
        </div>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
            <!-- Start Time -->
            <div>
                <label for="start_time"
                    style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">Start Time:</label>
                <input type="time" id="start_time" name="start_time" required
                    style="width: 100%; padding: 12px; border: 2px solid #bdc3c7; border-radius: 5px; font-size: 16px;">
            </div>

            <!-- End Time -->
            <div>
                <label for="end_time" style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">End
                    Time:</label>
                <input type="time" id="end_time" name="end_time" required
                    style="width: 100%; padding: 12px; border: 2px solid #bdc3c7; border-radius: 5px; font-size: 16px;">
            </div>
        </div>

        <!-- Active Days -->
        <div>
            <label style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">Active Days:</label>
            <div style="display: flex; gap: 15px; flex-wrap: wrap;">
                <label style="display: flex; align-items: center; gap: 5px;">
                    <input type="checkbox" name="active_days" value="Monday">
                    Monday
                </label>
                <label style="display: flex; align-items: center; gap: 5px;">
                    <input type="checkbox" name="active_days" value="Tuesday">
                    Tuesday
                </label>
                <label style="display: flex; align-items: center; gap: 5px;">
                    <input type="checkbox" name="active_days" value="Wednesday">
                    Wednesday
                </label>
                <label style="display: flex; align-items: center; gap: 5px;">
                    <input type="checkbox" name="active_days" value="Thursday">
                    Thursday
                </label>
                <label style="display: flex; align-items: center; gap: 5px;">
                    <input type="checkbox" name="active_days" value="Friday">
                    Friday
                </label>
                <label style="display: flex; align-items: center; gap: 5px;">
                    <input type="checkbox" name="active_days" value="Saturday">
                    Saturday
                </label>
                <label style="display: flex; align-items: center; gap: 5px;">
                    <input type="checkbox" name="active_days" value="Sunday">
                    Sunday
                </label>
            </div>
        </div>

        <button type="submit"
            style="padding: 12px 25px; background-color: #27ae60; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; font-weight: bold; justify-self: start;">
            ‚ûï Add Class
        </button>
    </form>
</div>

<!-- Classes Statistics -->
<div class="dashboard-stats"
    style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px;">
    <div style="background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h3 style="color: #2c3e50;">Total Classes</h3>
        <p style="font-size: 2em; color: #3498db;">{{classes.length}}</p>
    </div>

    <div style="background: white; padding: 20px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h3 style="color: #2c3e50;">Active Classes</h3>
        <p style="font-size: 2em; color: #27ae60;">
            {{activeClassesCount}}
        </p>
    </div>
</div>

<!-- Classes List -->
{{#if classes.length}}
<div class="classes-section">
    <h2 style="color: #2c3e50; margin-bottom: 20px;">Current Classes</h2>

    <div class="classes-grid"
        style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px;">
        {{#each classes}}
        <div
            style="background: white; padding: 25px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); border-left: 4px solid {{#if is_active}}#27ae60{{else}}#e74c3c{{/if}};">
            <!-- Class Header -->
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                <div style="flex: 1;">
                    <h3 style="color: #2c3e50; margin-bottom: 5px;">
                        {{sport.name}} - {{description}}
                    </h3>
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 5px;">
                        <span
                            style="background: {{#if is_active}}#27ae60{{else}}#e74c3c{{/if}}; color: white; padding: 2px 8px; border-radius: 3px; font-size: 12px;">
                            {{#if is_active}}Active{{else}}Inactive{{/if}}
                        </span>
                        <span style="color: #7f8c8d; font-size: 14px;">
                            üïê {{start_time}} - {{end_time}}
                        </span>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div style="display: flex; gap: 8px; flex-shrink: 0;">
                    <!-- Edit Button -->
                    <button
                        onclick="editClass('{{id}}', '{{description}}', '{{sport_id}}', '{{start_time}}', '{{end_time}}', [{{#each active_days}}'{{this}}'{{#unless @last}},{{/unless}}{{/each}}])"
                        style="padding: 6px 10px; background-color: #f39c12; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;"
                        title="Edit Class">
                        ‚úèÔ∏è
                    </button>

                    <!-- Toggle Active Status -->
                    <button onclick="toggleClassStatus('{{id}}', {{is_active}})"
                        style="padding: 6px 10px; background-color: {{#if is_active}}#e67e22{{else}}#27ae60{{/if}}; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;"
                        title="{{#if is_active}}Deactivate{{else}}Activate{{/if}} Class" id="toggle-btn-{{id}}">
                        {{#if is_active}}‚è∏Ô∏è{{else}}‚ñ∂Ô∏è{{/if}}
                    </button>

                    <!-- Delete Button -->
                    <button onclick="deleteClass('{{id}}', '{{sport.name}} - {{description}}')"
                        style="padding: 6px 10px; background-color: #e74c3c; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 11px;"
                        title="Delete Class">
                        üóëÔ∏è
                    </button>
                </div>
            </div>

            <!-- Class Details -->
            <div style="margin-bottom: 15px;">
                <p style="color: #7f8c8d; margin-bottom: 8px;">
                    <strong>Active Days:</strong>
                    {{#each active_days}}
                    <span
                        style="background: #ecf0f1; padding: 2px 6px; border-radius: 3px; font-size: 12px; margin-right: 5px;">
                        {{this}}
                    </span>
                    {{/each}}
                </p>
                <p style="color: #7f8c8d; font-size: 14px;">
                    <strong>Created:</strong> {{created_at}}
                </p>
                {{#if userClasses.length}}
                <p style="color: #7f8c8d; font-size: 14px;">
                    <strong>Enrolled:</strong> {{userClasses.length}} students
                </p>
                <!-- Show enrolled users -->
                <div style="margin-top: 10px;">
                    <strong style="color: #2c3e50; font-size: 12px;">Enrolled Students:</strong>
                    <div style="margin-top: 5px;">
                        {{#each userClasses}}
                        <span
                            style="display: inline-block; background: #3498db; color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px; margin-right: 5px; margin-bottom: 3px;">
                            {{user.first_name}} {{user.last_name}}
                        </span>
                        {{/each}}
                    </div>
                </div>
                {{else}}
                <p style="color: #7f8c8d; font-size: 14px;">
                    <strong>Enrolled:</strong> No students yet
                </p>
                {{/if}}
            </div>
        </div>
        {{/each}}
    </div>
</div>
{{else}}
<div
    style="text-align: center; padding: 60px; background: white; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
    <h2 style="color: #7f8c8d; margin-bottom: 15px;">No Classes Available</h2>
    <p style="color: #95a5a6; margin-bottom: 20px;">Get started by creating your first class!</p>
    <div style="font-size: 48px; margin-bottom: 20px;">üìö</div>
</div>
{{/if}}

<!-- Edit Modal -->
<div id="editModal"
    style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div
        style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 10px; min-width: 500px; max-height: 80vh; overflow-y: auto;">
        <h3 style="color: #2c3e50; margin-bottom: 20px;">Edit Class</h3>

        <form id="editForm" method="POST" style="display: grid; gap: 15px;">
            <!-- Sport Selection -->
            <div>
                <label style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">Sport:</label>
                <select id="editSportId" name="sport_id" required
                    style="width: 100%; padding: 12px; border: 2px solid #bdc3c7; border-radius: 5px;">
                    {{#each sports}}
                    <option value="{{id}}">{{name}}</option>
                    {{/each}}
                </select>
            </div>

            <!-- Description -->
            <div>
                <label
                    style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">Description:</label>
                <input type="text" id="editDescription" name="description" required
                    style="width: 100%; padding: 12px; border: 2px solid #bdc3c7; border-radius: 5px;">
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                <!-- Start Time -->
                <div>
                    <label style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">Start
                        Time:</label>
                    <input type="time" id="editStartTime" name="start_time" required
                        style="width: 100%; padding: 12px; border: 2px solid #bdc3c7; border-radius: 5px;">
                </div>

                <!-- End Time -->
                <div>
                    <label style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">End
                        Time:</label>
                    <input type="time" id="editEndTime" name="end_time" required
                        style="width: 100%; padding: 12px; border: 2px solid #bdc3c7; border-radius: 5px;">
                </div>
            </div>

            <!-- Active Days -->
            <div>
                <label style="display: block; margin-bottom: 8px; color: #2c3e50; font-weight: bold;">Active
                    Days:</label>
                <div style="display: flex; gap: 10px; flex-wrap: wrap;" id="editActiveDays">
                    <label><input type="checkbox" name="active_days" value="Monday"> Monday</label>
                    <label><input type="checkbox" name="active_days" value="Tuesday"> Tuesday</label>
                    <label><input type="checkbox" name="active_days" value="Wednesday"> Wednesday</label>
                    <label><input type="checkbox" name="active_days" value="Thursday"> Thursday</label>
                    <label><input type="checkbox" name="active_days" value="Friday"> Friday</label>
                    <label><input type="checkbox" name="active_days" value="Saturday"> Saturday</label>
                    <label><input type="checkbox" name="active_days" value="Sunday"> Sunday</label>
                </div>
            </div>

            <div style="display: flex; gap: 15px; justify-content: flex-end;">
                <button type="button" onclick="closeEditModal()"
                    style="padding: 10px 20px; background-color: #95a5a6; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    Cancel
                </button>
                <button type="submit"
                    style="padding: 10px 20px; background-color: #3498db; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    Update Class
                </button>
            </div>
        </form>
    </div>
</div>

<!-- View Enrolled Users Modal -->
<div id="usersModal"
    style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div
        style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 10px; min-width: 600px; max-height: 80vh; overflow-y: auto;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin: 0;" id="usersModalTitle">Enrolled Students</h3>
            <button onclick="closeUsersModal()"
                style="background: #e74c3c; color: white; border: none; border-radius: 50%; width: 30px; height: 30px; cursor: pointer;">
                ‚úï
            </button>
        </div>

        <div id="usersModalContent">
            <!-- Users will be populated here -->
        </div>

        <div style="margin-top: 20px; text-align: right;">
            <button onclick="closeUsersModal()"
                style="padding: 10px 20px; background-color: #95a5a6; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Close
            </button>
        </div>
    </div>
</div>

<script>
    async function toggleClassStatus(classId, currentStatus) {
        const newStatus = !currentStatus;

        try {
            const response = await fetch(`/classes/${classId}/edit`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include', // Include cookies for authentication
                body: JSON.stringify({
                    is_active: newStatus
                })
            });

            const result = await response.json();

            if (response.ok && result.success) {
                // Update button appearance
                const button = document.getElementById(`toggle-btn-${classId}`);
                const classCard = button.closest('[style*="border-left"]');

                if (newStatus) {
                    button.style.backgroundColor = '#e67e22';
                    button.innerHTML = '‚è∏Ô∏è';
                    button.title = 'Deactivate Class';
                    classCard.style.borderLeft = '4px solid #27ae60';
                    // Update status badge
                    const statusBadge = classCard.querySelector('[style*="padding: 2px 8px"]');
                    statusBadge.textContent = 'Active';
                    statusBadge.style.background = '#27ae60';
                } else {
                    button.style.backgroundColor = '#27ae60';
                    button.innerHTML = '‚ñ∂Ô∏è';
                    button.title = 'Activate Class';
                    classCard.style.borderLeft = '4px solid #e74c3c';
                    // Update status badge
                    const statusBadge = classCard.querySelector('[style*="padding: 2px 8px"]');
                    statusBadge.textContent = 'Inactive';
                    statusBadge.style.background = '#e74c3c';
                }

                // Show success alert
                showAlert(`Class ${newStatus ? 'activated' : 'deactivated'} successfully!`, 'success');
            } else {
                throw new Error(result.message || 'Failed to update class status');
            }
        } catch (error) {
            console.error('Error:', error);
            showAlert('Error updating class status: ' + error.message, 'error');
        }
    }

    // Delete class
    async function deleteClass(classId, className) {
        if (!confirm(`Are you sure you want to delete "${className}"? This action cannot be undone.`)) {
            return;
        }

        try {
            const response = await fetch(`/classes/${classId}/delete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include'
            });

            const result = await response.json();

            if (response.ok && result.success) {
                // Remove the class card from DOM
                const classCard = document.querySelector(`[onclick*="${classId}"]`).closest('[style*="border-left"]');
                classCard.style.transition = 'opacity 0.3s ease';
                classCard.style.opacity = '0';

                setTimeout(() => {
                    classCard.remove();
                    // Update class count
                    updateClassCount();
                    showAlert('Class deleted successfully!', 'success');
                }, 300);
            } else {
                throw new Error(result.message || 'Failed to delete class');
            }
        } catch (error) {
            console.error('Error:', error);
            showAlert('Error deleting class: ' + error.message, 'error');
        }
    }

    // Show custom alert
    function showAlert(message, type = 'info') {
        // Remove existing alert
        const existingAlert = document.getElementById('custom-alert');
        if (existingAlert) {
            existingAlert.remove();
        }

        // Create alert element
        const alert = document.createElement('div');
        alert.id = 'custom-alert';
        alert.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 5px;
        color: white;
        font-weight: bold;
        z-index: 9999;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        transition: opacity 0.3s ease;
        max-width: 400px;
    `;

        // Set background color based on type
        switch (type) {
            case 'success':
                alert.style.backgroundColor = '#27ae60';
                break;
            case 'error':
                alert.style.backgroundColor = '#e74c3c';
                break;
            case 'warning':
                alert.style.backgroundColor = '#f39c12';
                break;
            default:
                alert.style.backgroundColor = '#3498db';
        }

        alert.textContent = message;

        // Add to page
        document.body.appendChild(alert);

        // Auto remove after 5 seconds
        setTimeout(() => {
            alert.style.opacity = '0';
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 300);
        }, 5000);
    }

    // Update class count in statistics
    function updateClassCount() {
        const classCards = document.querySelectorAll('.classes-grid > div');
        const totalCount = classCards.length;
        const activeCount = Array.from(classCards).filter(card =>
            card.style.borderLeft.includes('#27ae60')
        ).length;

        // Update total count
        const totalElement = document.querySelector('[style*="font-size: 2em; color: #3498db"]');
        if (totalElement) totalElement.textContent = totalCount;

        // Update active count  
        const activeElement = document.querySelector('[style*="font-size: 2em; color: #27ae60"]');
        if (activeElement) activeElement.textContent = activeCount;
    }

    function editClass(id, description, sport_id, start_time, end_time, active_days) {
        document.getElementById('editModal').style.display = 'block';
        document.getElementById('editDescription').value = description;
        document.getElementById('editSportId').value = sport_id;
        document.getElementById('editStartTime').value = start_time.substring(0, 5); // Remove timezone
        document.getElementById('editEndTime').value = end_time.substring(0, 5); // Remove timezone

        // Set active days checkboxes
        const checkboxes = document.querySelectorAll('#editActiveDays input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = false);
        active_days.forEach(day => {
            const checkbox = document.querySelector(`#editActiveDays input[value="${day}"]`);
            if (checkbox) checkbox.checked = true;
        });

        document.getElementById('editForm').action = '/classes/' + id + '/edit';
    }

    function closeEditModal() {
        document.getElementById('editModal').style.display = 'none';
    }


    // Close modal when clicking outside
    document.getElementById('editModal').addEventListener('click', function (e) {
        if (e.target === this) {
            closeEditModal();
        }
    });

    document.getElementById('usersModal').addEventListener('click', function (e) {
        if (e.target === this) {
            closeUsersModal();
        }
    });

    // Handle edit form submission with AJAX
    document.getElementById('editForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        const classId = this.action.split('/').slice(-2, -1)[0];

        // Convert FormData to JSON
        const data = {};
        for (let [key, value] of formData.entries()) {
            if (key === 'active_days') {
                if (!data.active_days) data.active_days = [];
                data.active_days.push(value);
            } else {
                data[key] = value;
            }
        }

        try {
            const response = await fetch(this.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                closeEditModal();
                showAlert('Class updated successfully!', 'success');
                // Optionally refresh the page or update the specific class card
                setTimeout(() => location.reload(), 1000);
            } else {
                throw new Error(result.message || 'Failed to update class');
            }
        } catch (error) {
            showAlert('Error updating class: ' + error.message, 'error');
        }
    });

    // Handle create form submission with AJAX (optional)
    document.querySelector('form[action="/classes/create"]').addEventListener('submit', async function (e) {
        e.preventDefault();

        const formData = new FormData(this);
        const data = {};

        for (let [key, value] of formData.entries()) {
            if (key === 'active_days') {
                if (!data.active_days) data.active_days = [];
                data.active_days.push(value);
            } else {
                data[key] = value;
            }
        }

        try {
            const response = await fetch('/classes/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (response.ok && result.success) {
                this.reset();
                showAlert('Class created successfully!', 'success');
                // Optionally refresh or add the new class to the page
                setTimeout(() => location.reload(), 1000);
            } else {
                throw new Error(result.message || 'Failed to create class');
            }
        } catch (error) {
            showAlert('Error creating class: ' + error.message, 'error');
        }
    });
</script>